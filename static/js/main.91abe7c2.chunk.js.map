{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","components/hooks/PlayHook.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","value","Board","renderSquare","i","squares","calculateWinner","lines","length","a","b","c","Game","state","history","Array","fill","stepNumber","xIsNext","handleClick","slice","setState","concat","jumpTo","step","status","this","current","winner","moves","map","move","desc","key","Component","memo","useState","board","setBoard","setIsNext","style","marginLeft","App","textAlign","PlayHook","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.91abe7c2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Square = props => {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Square;\r\n","import React from \"react\";\r\nimport Square from \"./Square\";\r\n\r\nconst Board = props => {\r\n  const renderSquare = i => {\r\n    return <Square value={props.squares[i]} onClick={() => props.onClick(i)} />;\r\n  };\r\n  return (\r\n    <div>\r\n      {/* board game */}\r\n      <div className=\"board-row\">\r\n        {renderSquare(0)}\r\n        {renderSquare(1)}\r\n        {renderSquare(2)}\r\n      </div>\r\n      <div className=\"board-row\">\r\n        {renderSquare(3)}\r\n        {renderSquare(4)}\r\n        {renderSquare(5)}\r\n      </div>\r\n      <div className=\"board-row\">\r\n        {renderSquare(6)}\r\n        {renderSquare(7)}\r\n        {renderSquare(8)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React, { Component } from \"react\";\r\nimport Board from \"./Board\";\r\n//   winner\r\nconst calculateWinner = squares => {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n};\r\nclass Game extends Component {\r\n  state = {\r\n    history: [\r\n      {\r\n        squares: Array(9).fill(null)\r\n      }\r\n    ],\r\n    stepNumber: 0,\r\n    xIsNext: true\r\n  };\r\n\r\n  handleClick = i => {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares\r\n        }\r\n      ]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext\r\n    });\r\n  };\r\n\r\n  jumpTo = step => {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: step % 2 === 0\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n\r\n    const moves = history.map((step, move) => {\r\n      const desc = move ? \"Go to move #\" + move : \"Go to game start\";\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner;\r\n    } else {\r\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board squares={current.squares} onClick={i => this.handleClick(i)} />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Game;\r\n","import React, { useState, memo } from \"react\";\r\n\r\nfunction usePlayHook() {\r\n  // HOOKS\r\n  const [board, setBoard] = useState(Array(9).fill(null));\r\n  const [xIsNext, setIsNext] = useState(true);\r\n\r\n  //   handleClik\r\n  const handleClick = i => {\r\n    const squares = { ...board };\r\n    if (calculateWinner(board) || squares[i]) return;\r\n    squares[i] = xIsNext ? \"X\" : \"O\";\r\n    setBoard(squares);\r\n    setIsNext(!xIsNext);\r\n  };\r\n\r\n  //   Square\r\n  const Square = props => {\r\n    return (\r\n      <button className=\"square\" onClick={props.onClick}>\r\n        {props.value}\r\n      </button>\r\n    );\r\n  };\r\n\r\n  // initialize status and winner\r\n  let status;\r\n  const winner = calculateWinner(board);\r\n  if (winner) {\r\n    status = \"Winner: \" + winner;\r\n  } else {\r\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n  }\r\n\r\n  const renderSquare = i => {\r\n    return <Square value={board[i]} onClick={() => handleClick(i)} />;\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"status game-info\">{status}</div>\r\n      <div style={{ marginLeft: \"5rem\" }}>\r\n        {/* board game */}\r\n        <div className=\"board-row\">\r\n          {renderSquare(0)}\r\n          {renderSquare(1)}\r\n          {renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {renderSquare(3)}\r\n          {renderSquare(4)}\r\n          {renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {renderSquare(6)}\r\n          {renderSquare(7)}\r\n          {renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n//   winner\r\nconst calculateWinner = squares => {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n};\r\nexport default memo(usePlayHook);\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Game from \"./components/Game\";\nimport PlayHook from \"./components/hooks/PlayHook\";\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{ textAlign: \"center\" }}>\n      <h1>Class Component</h1>\n      <Game />\n      <hr />\n      <h1>Hooks</h1>\n      <PlayHook />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}